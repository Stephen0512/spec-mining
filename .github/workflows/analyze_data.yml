name: Analyzes the data and generate a report.csv


permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      release-tag:
        description: 'The tag of the release to download logs from.'
        required: true
        type: string
      repositories:
        description: 'Space-separated list of repositories in the format owner/repo.'
        required: true
        type: string

jobs:
    analyze_data:
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v4
            with:
              fetch-depth: 0
    
          - name: Setup working directories
            run: |
              mkdir -p ./projects/reports
            
          - name: Download files from multiple releases
            run: |
              # Array containing the alphabet and numbers for iterating
              chars=( {a..z} {0..9} )

              # Loop through each repository provided in the GitHub Action input
              for repo in ${{ github.event.inputs.repositories }}; do
                echo "Downloading from $repo"
                
                # Loop through each character in the array
                for char in "${chars[@]}"; do
                  echo "Attempting to download files starting with $char from $repo"
                  
                  # Try to download files starting with the current character, log failures
                  if ! gh release download ${{ github.event.inputs.release-tag }} -R $repo -D ./projects/reports --clobber --pattern "$char*"; then
                    echo "Failed to download files starting with $char from $repo" >> download_failures.log
                  fi
                done
              done

              echo "Download process completed. Check download_failures.log for any issues."
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
          - name: Extract zip files into folders with cleaned base name
            run: |
              # # Navigate to the directory containing the zip files
              cd ./projects/reports

              # # Extract zip files into folders with the same name
              for f in *.zip; do
                  folder_name="${f%.*}"
                  unzip -o -d "$folder_name" "$f"
              done

              # Within each folder, rename the file db.pymon to db.pymon_ext
              for folder in */; do
                  base_name=$(echo "$folder" | sed -E 's/(_ORIGINAL|_A|_B|_C\+?|_D)\/$//')
                  echo $base_name
                  ext=$(echo "$folder" | grep -oE '(_ORIGINAL|_A|_B|_C\+?|_D)\/' | sed 's/\///g')
                  if [[ -f "$folder/db.pymon" ]]; then
                      mv "$folder/db.pymon" "$folder/db.pymon$ext"
                  fi

                  # Prepare to merge folders
                  mkdir -p "./merged/$base_name"
                  mv "$folder"/* "./merged/$base_name/"
                  rmdir "$folder"
              done

              # Final merging step, move and overwrite all items to their respective base folders
              for folder in ./merged/*; do
                  base_name=$(basename "$folder")
                  echo $folder
                  echo $base_name
                  if [[ ! -d "./$base_name" ]]; then
                      echo moving "$folder" to "./$base_name"
                      mv "$folder" "./$base_name"
                  else
                      echo moving "$folder"/ to "./$base_name/"
                      mv "$folder"/* "./$base_name/"
                      rmdir "$folder"
                  fi
              done

              # # Clean up the temporary merged directory
              rmdir ./merged

              # # List the contents of the current directory to verify
              ls -l
    
          - name: Generate report csv
            run: |
              cd ./projects/reports
    
              # move ../../../scripts/parse_reports.py and sanity_check.py to ./projects/reports
              cp ../../scripts/parse_reports.py .
              cp ../../scripts/sanity_check.py .

              ls -l

              python3 parse_reports.py

              echo "================================== Results =================================="
              cat results.csv

              python3 sanity_check.py
              echo "========================= Results after Sanity check ========================"
              cat results.csv
    
            shell: bash
            continue-on-error: true
    
          - name: Upload report to GitHub Release
            uses: Wandalen/wretry.action@master
            with:
              attempt_delay: 60000 # 1 min
              attempt_limit: 10
              action: softprops/action-gh-release@v1
              with: |
                files: |
                  ./projects/reports/results.csv
                  ./projects/reports/new-results.csv
                tag_name: all-results-${{inputs.release-tag}}
                name: all-results-${{inputs.release-tag}}
                draft: false
                prerelease: true
                token: ${{ secrets.GITHUB_TOKEN }}
